{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abegail.firme\\\\devpractice\\\\ReactJS\\\\01-starting-project\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport useInput from \"../hooks/useInput\";\nimport useNumber from \"../hooks/useNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const numberRegEx = /[0-9]/;\n  const {\n    value: enteredFName,\n    isValid: enteredFNameIsValid,\n    hasError: fnameInputHasError,\n    valueChangeHandler: fnameChangeHandler,\n    inputBlurHandler: fnameBlurHandler,\n    reset: resetfName\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredLName,\n    isValid: enteredLNameIsValid,\n    hasError: lnameInputHasError,\n    valueChangeHandler: lnameChangeHandler,\n    inputBlurHandler: lnameBlurHandler,\n    reset: resetlName\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredEID,\n    isValid: enteredIdIsValid,\n    hasError: idInputHasError,\n    valueChangeHandler: idChangeHandler,\n    inputBlurHandler: idBlurHandler,\n    reset: resetID\n  } = useInput(value => numberRegEx.test(value));\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail\n  } = useInput(value => value.includes('@'));\n  const {\n    value: enteredDate,\n    isValid: enteredDateIsValid,\n    hasError: dateInputHasError,\n    valueChangeHandler: bdateChangeHandler,\n    inputBlurHandler: bdateBlurHandler,\n    reset: resetDate\n  } = useInput(value => value.trim() !== '');\n  let formIsValid = false;\n\n  if (enteredFNameIsValid && enteredLNameIsValid && enteredEmailIsValid && enteredIdIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    console.log(enteredEID);\n    resetfName();\n    resetlName();\n    resetEmail();\n    resetID();\n    resetDate();\n  };\n\n  const fnameInputClasses = fnameInputHasError ? 'form-control invalid' : 'form-control';\n  const lnameInputClasses = lnameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputHasError ? 'form-control invalid' : 'form-control';\n  const idInputClasses = idInputHasError ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: idInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"eid\",\n        children: \"Enterprise ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"eid\",\n        value: enteredEID,\n        onChange: idChangeHandler,\n        onBlur: idBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), idInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Enterprise ID must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: fnameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fname\",\n          children: \"First name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"fname\",\n          value: enteredFName,\n          onChange: fnameChangeHandler,\n          onBlur: fnameBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), fnameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"First name must not be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: lnameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lname\",\n          children: \"Last name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"lname\",\n          value: enteredLName,\n          onChange: lnameChangeHandler,\n          onBlur: lnameBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), lnameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Last name must not be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        value: enteredEmail,\n        onChange: emailChangeHandler,\n        onBlur: emailBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valid email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"bdate\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"bdate\",\n        value: enteredDate,\n        onChange: bdateChangeHandler,\n        onBlur: bdateBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), dateInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Birth date is required.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"0VtImuPJzSTkF2EhcClehr/ohgU=\", false, function () {\n  return [useInput, useInput, useInput, useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["C:/Users/abegail.firme/devpractice/ReactJS/01-starting-project/src/components/SimpleInput.js"],"names":["useInput","useNumber","SimpleInput","props","numberRegEx","value","enteredFName","isValid","enteredFNameIsValid","hasError","fnameInputHasError","valueChangeHandler","fnameChangeHandler","inputBlurHandler","fnameBlurHandler","reset","resetfName","trim","enteredLName","enteredLNameIsValid","lnameInputHasError","lnameChangeHandler","lnameBlurHandler","resetlName","enteredEID","enteredIdIsValid","idInputHasError","idChangeHandler","idBlurHandler","resetID","test","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmail","includes","enteredDate","enteredDateIsValid","dateInputHasError","bdateChangeHandler","bdateBlurHandler","resetDate","formIsValid","formSubmissionHandler","event","preventDefault","console","log","fnameInputClasses","lnameInputClasses","emailInputClasses","idInputClasses"],"mappings":"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","sourcesContent":["import useInput from \"../hooks/useInput\";\nimport useNumber from \"../hooks/useNumber\";\n\nconst SimpleInput = (props) => {\n  const numberRegEx = /[0-9]/;\n\n  const {\n    value: enteredFName,\n    isValid: enteredFNameIsValid,\n    hasError: fnameInputHasError,\n    valueChangeHandler: fnameChangeHandler,\n    inputBlurHandler: fnameBlurHandler,\n    reset: resetfName\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredLName,\n    isValid: enteredLNameIsValid,\n    hasError: lnameInputHasError,\n    valueChangeHandler: lnameChangeHandler,\n    inputBlurHandler: lnameBlurHandler,\n    reset: resetlName\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredEID,\n    isValid: enteredIdIsValid,\n    hasError: idInputHasError,\n    valueChangeHandler: idChangeHandler,\n    inputBlurHandler: idBlurHandler,\n    reset: resetID\n  } = useInput(value => numberRegEx.test(value));\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail\n  } = useInput(value => value.includes('@'));\n\n  const {\n    value: enteredDate,\n    isValid: enteredDateIsValid,\n    hasError: dateInputHasError,\n    valueChangeHandler: bdateChangeHandler,\n    inputBlurHandler: bdateBlurHandler,\n    reset: resetDate\n  } = useInput(value => value.trim() !== '');\n\n  let formIsValid = false;\n\n  if (enteredFNameIsValid && enteredLNameIsValid && enteredEmailIsValid && enteredIdIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    console.log(enteredEID)\n    resetfName();\n    resetlName();\n    resetEmail();\n    resetID();\n    resetDate();\n  };\n\n  const fnameInputClasses = fnameInputHasError ? 'form-control invalid' : 'form-control';\n  const lnameInputClasses = lnameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputHasError ? 'form-control invalid' : 'form-control';\n  const idInputClasses = idInputHasError ? 'form-control invalid' : 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={idInputClasses}>\n        <label htmlFor='eid'>Enterprise ID</label>\n        <input type='text' id='eid' value={enteredEID} onChange={idChangeHandler} onBlur={idBlurHandler} />\n        {idInputHasError && <p className=\"error-text\">Enterprise ID must not be empty</p>}\n      </div>\n\n      <div>\n        <div className={fnameInputClasses}>\n          <label htmlFor='fname'>First name</label>\n          <input type='text' id='fname' value={enteredFName} onChange={fnameChangeHandler} onBlur={fnameBlurHandler} />\n          {fnameInputHasError && <p className=\"error-text\">First name must not be empty</p>}\n        </div>\n\n        <div className={lnameInputClasses}>\n          <label htmlFor='lname'>Last name</label>\n          <input type='text' id='lname' value={enteredLName} onChange={lnameChangeHandler} onBlur={lnameBlurHandler} />\n          {lnameInputHasError && <p className=\"error-text\">Last name must not be empty</p>}\n        </div>\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Email</label>\n        <input type='text' id='email' value={enteredEmail} onChange={emailChangeHandler} onBlur={emailBlurHandler} />\n        {emailInputHasError && <p className=\"error-text\">Please enter a valid email</p>}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor='bdate'>Email</label>\n        <input type='date' id='bdate' value={enteredDate} onChange={bdateChangeHandler} onBlur={bdateBlurHandler} />\n        {dateInputHasError && <p className=\"error-text\">Birth date is required.</p>}\n      </div>\n      \n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}