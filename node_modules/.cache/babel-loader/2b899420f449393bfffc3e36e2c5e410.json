{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useNumber = input => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const [enteredValueIsValid, setEnteredValueIsValid] = useState(false);\n  const [isTouched, setIsTouched] = useState(false);\n  let l = enteredValue.length;\n  const numberRegEx = /[0-9]/;\n  const valueIsValid = numberRegEx.test(enteredValue[l - 1]);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useNumber, \"0u33C7NShGqzpP8U7kgcQpw0zdk=\");\n\nexport default useNumber;","map":{"version":3,"sources":["C:/Users/abegail.firme/devpractice/ReactJS/01-starting-project/src/hooks/useNumber.js"],"names":["useState","useNumber","input","enteredValue","setEnteredValue","enteredValueIsValid","setEnteredValueIsValid","isTouched","setIsTouched","l","length","numberRegEx","valueIsValid","test","hasError","valueChangeHandler","event","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,mBAAD,EAAsBC,sBAAtB,IAAgDN,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AAEA,MAAIS,CAAC,GAAGN,YAAY,CAACO,MAArB;AAEA,QAAMC,WAAW,GAAG,OAApB;AACA,QAAMC,YAAY,GAAGD,WAAW,CAACE,IAAZ,CAAiBV,YAAY,CAACM,CAAC,GAAC,CAAH,CAA7B,CAArB;AACA,QAAMK,QAAQ,GAAG,CAACF,YAAD,IAAiBL,SAAlC;;AAEA,QAAMQ,kBAAkB,GAAGC,KAAK,IAAI;AAChCZ,IAAAA,eAAe,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAGH,KAAK,IAAI;AAC9BR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMY,KAAK,GAAG,MAAM;AAChBhB,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAI,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKA,SAAO;AACHU,IAAAA,KAAK,EAAEf,YADJ;AAEHkB,IAAAA,OAAO,EAAET,YAFN;AAGHE,IAAAA,QAHG;AAIHC,IAAAA,kBAJG;AAKHI,IAAAA,gBALG;AAMHC,IAAAA;AANG,GAAP;AAQH,CAhCD;;GAAMnB,S;;AAkCN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useNumber = (input) => {\r\n    const [enteredValue, setEnteredValue] = useState('');\r\n    const [enteredValueIsValid, setEnteredValueIsValid] = useState(false);\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    let l = enteredValue.length;\r\n\r\n    const numberRegEx = /[0-9]/;\r\n    const valueIsValid = numberRegEx.test(enteredValue[l-1])\r\n    const hasError = !valueIsValid && isTouched;\r\n\r\n    const valueChangeHandler = event => {\r\n        setEnteredValue(event.target.value);\r\n    };\r\n\r\n    const inputBlurHandler = event => {\r\n        setIsTouched(true);\r\n    };\r\n\r\n    const reset = () => {\r\n        setEnteredValue('');\r\n        setIsTouched(false);\r\n    };\r\n\r\n    return {\r\n        value: enteredValue,\r\n        isValid: valueIsValid,\r\n        hasError,\r\n        valueChangeHandler,\r\n        inputBlurHandler,\r\n        reset\r\n    };\r\n};\r\n\r\nexport default useNumber;"]},"metadata":{},"sourceType":"module"}