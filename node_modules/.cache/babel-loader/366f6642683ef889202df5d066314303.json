{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abegail.firme\\\\devpractice\\\\ReactJS\\\\workbook-reactjs\\\\src\\\\components\\\\EntryForm.js\",\n    _s = $RefreshSig$();\n\nimport Modal from \"./UI/Modal\";\nimport React from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport useNumber from \"../hooks/useNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EntryForm = props => {\n  _s();\n\n  const numExp = /^[0-9\\b]+$/;\n  const {\n    value: enteredFName,\n    isValid: enteredFNameIsValid,\n    hasError: fnameInputHasError,\n    valueChangeHandler: fnameChangeHandler,\n    inputBlurHandler: fnameBlurHandler,\n    reset: resetfName\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredLName,\n    isValid: enteredLNameIsValid,\n    hasError: lnameInputHasError,\n    valueChangeHandler: lnameChangeHandler,\n    inputBlurHandler: lnameBlurHandler,\n    reset: resetlName\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredEID,\n    isValid: enteredIdIsValid,\n    hasError: idInputHasError,\n    valueChangeHandler: idChangeHandler,\n    inputBlurHandler: idBlurHandler,\n    reset: resetID\n  } = useInput(value => value.trim() !== '');\n\n  const numOnly = input => {\n    const numExp = /^[0-9\\b]+$/;\n    let val = input.target.value;\n    if (input.target.value === '' || numExp.test(input.target.value)) return true;else {\n      input.target.value = val.substring(0, val.length - 1);\n      return false;\n    }\n  };\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail\n  } = useInput(value => value.includes('@'));\n  const {\n    value: enteredDate,\n    isValid: enteredDateIsValid,\n    hasError: dateInputHasError,\n    valueChangeHandler: bdateChangeHandler,\n    inputBlurHandler: bdateBlurHandler,\n    reset: resetDate\n  } = useInput(value => value.trim() !== '');\n  let formIsValid = false;\n\n  if (enteredFNameIsValid && enteredLNameIsValid && enteredEmailIsValid && enteredIdIsValid && enteredDateIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    const entry = {\n      // eid: enteredEID,\n      firstname: enteredFName,\n      lastname: enteredLName,\n      email: enteredEmail,\n      birthdate: enteredDate\n    };\n    props.onAddEntry(entry);\n    resetfName();\n    resetlName();\n    resetEmail(); // resetID();\n\n    resetDate();\n  };\n\n  const fnameInputClasses = fnameInputHasError ? 'form-control invalid' : 'form-control';\n  const lnameInputClasses = lnameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputHasError ? 'form-control invalid' : 'form-control';\n  const idInputClasses = idInputHasError ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      modalTitle: \"Success!\",\n      modalMessage: \"The entry is succesfully saved.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formSubmissionHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: idInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"eid\",\n          children: \"Enterprise ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"eid\",\n          onChange: numOnly,\n          onBlur: idBlurHandler,\n          value: enteredEID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), idInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Enterprise ID must not be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: fnameInputClasses,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fname\",\n            children: \"First name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"fname\",\n            value: enteredFName,\n            onInput: fnameChangeHandler,\n            onBlur: fnameBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), fnameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-text\",\n            children: \"First name must not be empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: lnameInputClasses,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"lname\",\n            children: \"Last name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"lname\",\n            value: enteredLName,\n            onChange: lnameChangeHandler,\n            onBlur: lnameBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), lnameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-text\",\n            children: \"Last name must not be empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: emailInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"email\",\n          value: enteredEmail,\n          onChange: emailChangeHandler,\n          onBlur: emailBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Please enter a valid email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: emailInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bdate\",\n          children: \"Birthdate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"bdate\",\n          value: enteredDate,\n          onChange: bdateChangeHandler,\n          onBlur: bdateBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), dateInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Birthdate is required.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          disabled: !formIsValid,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EntryForm, \"0VtImuPJzSTkF2EhcClehr/ohgU=\", false, function () {\n  return [useInput, useInput, useInput, useInput, useInput];\n});\n\n_c = EntryForm;\nexport default EntryForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EntryForm\");","map":{"version":3,"sources":["C:/Users/abegail.firme/devpractice/ReactJS/workbook-reactjs/src/components/EntryForm.js"],"names":["Modal","React","useInput","useNumber","EntryForm","props","numExp","value","enteredFName","isValid","enteredFNameIsValid","hasError","fnameInputHasError","valueChangeHandler","fnameChangeHandler","inputBlurHandler","fnameBlurHandler","reset","resetfName","trim","enteredLName","enteredLNameIsValid","lnameInputHasError","lnameChangeHandler","lnameBlurHandler","resetlName","enteredEID","enteredIdIsValid","idInputHasError","idChangeHandler","idBlurHandler","resetID","numOnly","input","val","target","test","substring","length","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmail","includes","enteredDate","enteredDateIsValid","dateInputHasError","bdateChangeHandler","bdateBlurHandler","resetDate","formIsValid","formSubmissionHandler","event","preventDefault","entry","firstname","lastname","email","birthdate","onAddEntry","fnameInputClasses","lnameInputClasses","emailInputClasses","idInputClasses"],"mappings":"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","sourcesContent":["import Modal from \"./UI/Modal\";\nimport React from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport useNumber from \"../hooks/useNumber\";\n\nconst EntryForm = (props) => {\n  const numExp = /^[0-9\\b]+$/;\n\n  const {\n    value: enteredFName,\n    isValid: enteredFNameIsValid,\n    hasError: fnameInputHasError,\n    valueChangeHandler: fnameChangeHandler,\n    inputBlurHandler: fnameBlurHandler,\n    reset: resetfName\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredLName,\n    isValid: enteredLNameIsValid,\n    hasError: lnameInputHasError,\n    valueChangeHandler: lnameChangeHandler,\n    inputBlurHandler: lnameBlurHandler,\n    reset: resetlName\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredEID,\n    isValid: enteredIdIsValid,\n    hasError: idInputHasError,\n    valueChangeHandler: idChangeHandler,\n    inputBlurHandler: idBlurHandler,\n    reset: resetID\n  }  = useInput(value => value.trim() !== '');\n\n  const numOnly = (input) => {\n    const numExp = /^[0-9\\b]+$/\n\n    let val = input.target.value;\n\n    if (input.target.value === '' || numExp.test(input.target.value)) return true;\n    else {\n      input.target.value = val.substring(0, (val.length - 1))\n      return false   \n    }\n  }\n\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail\n  } = useInput(value => value.includes('@'));\n\n  const {\n    value: enteredDate,\n    isValid: enteredDateIsValid,\n    hasError: dateInputHasError,\n    valueChangeHandler: bdateChangeHandler,\n    inputBlurHandler: bdateBlurHandler,\n    reset: resetDate\n  } = useInput(value => value.trim() !== '');\n\n  let formIsValid = false;\n\n  if (enteredFNameIsValid && enteredLNameIsValid && enteredEmailIsValid && enteredIdIsValid && enteredDateIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    const entry = {\n      // eid: enteredEID,\n      firstname: enteredFName,\n      lastname: enteredLName,\n      email: enteredEmail,\n      birthdate: enteredDate\n    };\n\n    props.onAddEntry(entry);\n\n    resetfName();\n    resetlName();\n    resetEmail();\n    // resetID();\n    resetDate();\n  };\n\n  const fnameInputClasses = fnameInputHasError ? 'form-control invalid' : 'form-control';\n  const lnameInputClasses = lnameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputHasError ? 'form-control invalid' : 'form-control';\n  const idInputClasses = idInputHasError ? 'form-control invalid' : 'form-control';\n\n  return (\n    <React.Fragment>\n      <Modal modalTitle=\"Success!\" modalMessage=\"The entry is succesfully saved.\" />\n      <form onSubmit={formSubmissionHandler}>\n        <div className={idInputClasses}>\n          <label htmlFor='eid'>Enterprise ID</label>\n          <input type='text' id='eid' onChange={numOnly} onBlur={idBlurHandler} value={enteredEID}/>\n          {idInputHasError && <p className=\"error-text\">Enterprise ID must not be empty</p>}\n        </div>\n\n        <div>\n          <div className={fnameInputClasses}>\n            <label htmlFor='fname'>First name</label>\n            <input type='text' id='fname' value={enteredFName} onInput={fnameChangeHandler} onBlur={fnameBlurHandler} />\n            {fnameInputHasError && <p className=\"error-text\">First name must not be empty</p>}\n          </div>\n\n          <div className={lnameInputClasses}>\n            <label htmlFor='lname'>Last name</label>\n            <input type='text' id='lname' value={enteredLName} onChange={lnameChangeHandler} onBlur={lnameBlurHandler} />\n            {lnameInputHasError && <p className=\"error-text\">Last name must not be empty</p>}\n          </div>\n        </div>\n\n        <div className={emailInputClasses}>\n          <label htmlFor='email'>Email</label>\n          <input type='text' id='email' value={enteredEmail} onChange={emailChangeHandler} onBlur={emailBlurHandler} />\n          {emailInputHasError && <p className=\"error-text\">Please enter a valid email</p>}\n        </div>\n\n        <div className={emailInputClasses}>\n          <label htmlFor='bdate'>Birthdate</label>\n          <input type='date' id='bdate' value={enteredDate} onChange={bdateChangeHandler} onBlur={bdateBlurHandler} />\n          {dateInputHasError && <p className=\"error-text\">Birthdate is required.</p>}\n        </div>\n\n        <div className=\"form-actions\">\n          <button className=\"btn btn-primary\" disabled={!formIsValid}>Submit</button>\n        </div>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default EntryForm;\n"]},"metadata":{},"sourceType":"module"}