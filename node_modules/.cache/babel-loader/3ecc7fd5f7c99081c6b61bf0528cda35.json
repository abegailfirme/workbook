{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abegail.firme\\\\devpractice\\\\ReactJS\\\\workbook-reactjs\\\\src\\\\components\\\\EntryForm.js\",\n    _s2 = $RefreshSig$();\n\nimport Modal from \"./UI/Modal\";\nimport React from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport useNumber from \"../hooks/useNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EntryForm = props => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const numExp = /^[0-9\\b]+$/;\n  const {\n    value: enteredFName,\n    isValid: enteredFNameIsValid,\n    hasError: fnameInputHasError,\n    valueChangeHandler: fnameChangeHandler,\n    inputBlurHandler: fnameBlurHandler,\n    reset: resetfName\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredLName,\n    isValid: enteredLNameIsValid,\n    hasError: lnameInputHasError,\n    valueChangeHandler: lnameChangeHandler,\n    inputBlurHandler: lnameBlurHandler,\n    reset: resetlName\n  } = useInput(value => value.trim() !== ''); // const {\n  //   value: enteredEID,\n  //   isValid: enteredIdIsValid,\n  //   hasError: idInputHasError,\n  //   valueChangeHandler: idChangeHandler,\n  //   inputBlurHandler: idBlurHandler,\n  //   reset: resetID\n  // } = useNumber(value => value.trim() === '' || numExp.test(value));\n\n  const idChangeHandler = event => {\n    _s();\n\n    const isNum = useNumber(event.target.value);\n  }; // const numOnly = (input) => {\n  //   const numExp = /^[0-9\\b]+$/\n  //   let val = input.target.value;\n  //   if(input.target.value === '' || numExp.test(input.target.value)) return true;\n  //   else input.target.value = val.substring(0, (val.length-1))\n  // }\n\n\n  _s(idChangeHandler, \"tuWP1rzShZLxCjkVzBJfJCquUqo=\", false, function () {\n    return [useNumber];\n  });\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail\n  } = useInput(value => value.includes('@'));\n  const {\n    value: enteredDate,\n    isValid: enteredDateIsValid,\n    hasError: dateInputHasError,\n    valueChangeHandler: bdateChangeHandler,\n    inputBlurHandler: bdateBlurHandler,\n    reset: resetDate\n  } = useInput(value => value.trim() !== '');\n  let formIsValid = false;\n\n  if (enteredFNameIsValid && enteredLNameIsValid && enteredEmailIsValid && enteredIdIsValid && enteredDateIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    const entry = {\n      eid: enteredEID,\n      firstname: enteredFName,\n      lastname: enteredLName,\n      email: enteredEmail,\n      birthdate: enteredDate\n    };\n    props.onAddEntry(entry);\n    resetfName();\n    resetlName();\n    resetEmail();\n    resetID();\n    resetDate();\n  };\n\n  const fnameInputClasses = fnameInputHasError ? 'form-control invalid' : 'form-control';\n  const lnameInputClasses = lnameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputHasError ? 'form-control invalid' : 'form-control';\n  const idInputClasses = idInputHasError ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      modalTitle: \"Success!\",\n      modalMessage: \"The entry is succesfully saved.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formSubmissionHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: idInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"eid\",\n          children: \"Enterprise ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"eid\",\n          onChange: idChangeHandler,\n          onBlur: idBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), idInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Enterprise ID must not be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: fnameInputClasses,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fname\",\n            children: \"First name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"fname\",\n            value: enteredFName,\n            onChange: fnameChangeHandler,\n            onBlur: fnameBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), fnameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-text\",\n            children: \"First name must not be empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: lnameInputClasses,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"lname\",\n            children: \"Last name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"lname\",\n            value: enteredLName,\n            onChange: lnameChangeHandler,\n            onBlur: lnameBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), lnameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-text\",\n            children: \"Last name must not be empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: emailInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"email\",\n          value: enteredEmail,\n          onChange: emailChangeHandler,\n          onBlur: emailBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Please enter a valid email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: emailInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bdate\",\n          children: \"Birthdate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"bdate\",\n          value: enteredDate,\n          onChange: bdateChangeHandler,\n          onBlur: bdateBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), dateInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Birthdate is required.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          disabled: !formIsValid,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(EntryForm, \"FGk9Mm1dEArUmJLIlhejZgxkRLY=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = EntryForm;\nexport default EntryForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EntryForm\");","map":{"version":3,"sources":["C:/Users/abegail.firme/devpractice/ReactJS/workbook-reactjs/src/components/EntryForm.js"],"names":["Modal","React","useInput","useNumber","EntryForm","props","numExp","value","enteredFName","isValid","enteredFNameIsValid","hasError","fnameInputHasError","valueChangeHandler","fnameChangeHandler","inputBlurHandler","fnameBlurHandler","reset","resetfName","trim","enteredLName","enteredLNameIsValid","lnameInputHasError","lnameChangeHandler","lnameBlurHandler","resetlName","idChangeHandler","event","isNum","target","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmail","includes","enteredDate","enteredDateIsValid","dateInputHasError","bdateChangeHandler","bdateBlurHandler","resetDate","formIsValid","enteredIdIsValid","formSubmissionHandler","preventDefault","entry","eid","enteredEID","firstname","lastname","email","birthdate","onAddEntry","resetID","fnameInputClasses","lnameInputClasses","emailInputClasses","idInputClasses","idInputHasError","idBlurHandler"],"mappings":"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","sourcesContent":["import Modal from \"./UI/Modal\";\nimport React from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport useNumber from \"../hooks/useNumber\";\n\nconst EntryForm = (props) => {\n  const numExp = /^[0-9\\b]+$/;\n\n\n  const {\n    value: enteredFName,\n    isValid: enteredFNameIsValid,\n    hasError: fnameInputHasError,\n    valueChangeHandler: fnameChangeHandler,\n    inputBlurHandler: fnameBlurHandler,\n    reset: resetfName\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredLName,\n    isValid: enteredLNameIsValid,\n    hasError: lnameInputHasError,\n    valueChangeHandler: lnameChangeHandler,\n    inputBlurHandler: lnameBlurHandler,\n    reset: resetlName\n  } = useInput(value => value.trim() !== '');\n\n  // const {\n  //   value: enteredEID,\n  //   isValid: enteredIdIsValid,\n  //   hasError: idInputHasError,\n  //   valueChangeHandler: idChangeHandler,\n  //   inputBlurHandler: idBlurHandler,\n  //   reset: resetID\n  // } = useNumber(value => value.trim() === '' || numExp.test(value));\n\n  const idChangeHandler = (event) => {\n    const isNum = useNumber(event.target.value)\n  }\n  // const numOnly = (input) => {\n  //   const numExp = /^[0-9\\b]+$/\n\n  //   let val = input.target.value;\n\n  //   if(input.target.value === '' || numExp.test(input.target.value)) return true;\n  //   else input.target.value = val.substring(0, (val.length-1))\n  // }\n  \n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail\n  } = useInput(value => value.includes('@'));\n\n  const {\n    value: enteredDate,\n    isValid: enteredDateIsValid,\n    hasError: dateInputHasError,\n    valueChangeHandler: bdateChangeHandler,\n    inputBlurHandler: bdateBlurHandler,\n    reset: resetDate\n  } = useInput(value => value.trim() !== '');\n\n  let formIsValid = false;\n\n  if (enteredFNameIsValid && enteredLNameIsValid && enteredEmailIsValid && enteredIdIsValid &&  enteredDateIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    const entry = {\n      eid: enteredEID,\n      firstname: enteredFName,\n      lastname: enteredLName,\n      email: enteredEmail,\n      birthdate: enteredDate\n    };\n\n    props.onAddEntry(entry);\n\n    resetfName();\n    resetlName();\n    resetEmail();\n    resetID();\n    resetDate();\n  };\n\n  const fnameInputClasses = fnameInputHasError ? 'form-control invalid' : 'form-control';\n  const lnameInputClasses = lnameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputHasError ? 'form-control invalid' : 'form-control';\n  const idInputClasses = idInputHasError ? 'form-control invalid' : 'form-control';\n\n  return (\n    <React.Fragment>\n      <Modal modalTitle=\"Success!\" modalMessage=\"The entry is succesfully saved.\"/>\n      <form onSubmit={formSubmissionHandler}>\n        <div className={idInputClasses}>\n          <label htmlFor='eid'>Enterprise ID</label>\n          <input type='text' id='eid' onChange={idChangeHandler} onBlur={idBlurHandler} />\n          {idInputHasError && <p className=\"error-text\">Enterprise ID must not be empty</p>}\n        </div>\n\n        <div>\n          <div className={fnameInputClasses}>\n            <label htmlFor='fname'>First name</label>\n            <input type='text' id='fname' value={enteredFName} onChange={fnameChangeHandler} onBlur={fnameBlurHandler} />\n            {fnameInputHasError && <p className=\"error-text\">First name must not be empty</p>}\n          </div>\n\n          <div className={lnameInputClasses}>\n            <label htmlFor='lname'>Last name</label>\n            <input type='text' id='lname' value={enteredLName} onChange={lnameChangeHandler} onBlur={lnameBlurHandler} />\n            {lnameInputHasError && <p className=\"error-text\">Last name must not be empty</p>}\n          </div>\n        </div>\n\n        <div className={emailInputClasses}>\n          <label htmlFor='email'>Email</label>\n          <input type='text' id='email' value={enteredEmail} onChange={emailChangeHandler} onBlur={emailBlurHandler} />\n          {emailInputHasError && <p className=\"error-text\">Please enter a valid email</p>}\n        </div>\n\n        <div className={emailInputClasses}>\n          <label htmlFor='bdate'>Birthdate</label>\n          <input type='date' id='bdate' value={enteredDate} onChange={bdateChangeHandler} onBlur={bdateBlurHandler} />\n          {dateInputHasError && <p className=\"error-text\">Birthdate is required.</p>}\n        </div>\n\n        <div className=\"form-actions\">\n          <button className=\"btn btn-primary\" disabled={!formIsValid}>Submit</button>\n        </div>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default EntryForm;\n"]},"metadata":{},"sourceType":"module"}