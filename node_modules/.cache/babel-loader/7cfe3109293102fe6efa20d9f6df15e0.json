{"ast":null,"code":"import { useState } from \"react\";\n\nconst useNumber = input => {\n  const numExp = /^[0-9\\b]+$/;\n  let val = input.target.value;\n  if (input.target.value === '' || numExp.test(input.target.value)) return true;else input.target.value = val.substring(0, val.length - 1); // const [enteredValue, setEnteredValue] = useState('');\n  // const [enteredValueIsValid, setEnteredValueIsValid] = useState(false);\n  // const [isTouched, setIsTouched] = useState(false);\n  // let l = enteredValue.length;\n  // const numberRegEx = /[0-9]/;\n\n  const valueIsValid = input(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    console.log(enteredValue, valueIsValid);\n    console.log(event.target.value[l - 1]);\n    setEnteredValue(event.target.value); // valueIsValid = numberRegEx.test(event.target.value[l-1])\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\nexport default useNumber;","map":{"version":3,"sources":["C:/Users/abegail.firme/devpractice/ReactJS/workbook-reactjs/src/hooks/useNumber.js"],"names":["useState","useNumber","input","numExp","val","target","value","test","substring","length","valueIsValid","enteredValue","hasError","isTouched","valueChangeHandler","event","console","log","l","setEnteredValue","inputBlurHandler","setIsTouched","reset","isValid"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AACzB,QAAMC,MAAM,GAAG,YAAf;AAEA,MAAIC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAaC,KAAvB;AAEA,MAAGJ,KAAK,CAACG,MAAN,CAAaC,KAAb,KAAuB,EAAvB,IAA6BH,MAAM,CAACI,IAAP,CAAYL,KAAK,CAACG,MAAN,CAAaC,KAAzB,CAAhC,EAAiE,OAAO,IAAP,CAAjE,KACKJ,KAAK,CAACG,MAAN,CAAaC,KAAb,GAAqBF,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAkBJ,GAAG,CAACK,MAAJ,GAAW,CAA7B,CAArB,CANoB,CASzB;AACA;AACA;AAEA;AAEA;;AACA,QAAMC,YAAY,GAAGR,KAAK,CAACS,YAAD,CAA1B;AACA,QAAMC,QAAQ,GAAG,CAACF,YAAD,IAAiBG,SAAlC;;AAEA,QAAMC,kBAAkB,GAAGC,KAAK,IAAI;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ,EAA0BD,YAA1B;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACV,MAAN,CAAaC,KAAb,CAAmBY,CAAC,GAAC,CAArB,CAAZ;AACAC,IAAAA,eAAe,CAACJ,KAAK,CAACV,MAAN,CAAaC,KAAd,CAAf,CAHgC,CAIhC;AAEH,GAND;;AAQA,QAAMc,gBAAgB,GAAGL,KAAK,IAAI;AAC9BM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMC,KAAK,GAAG,MAAM;AAChBH,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKA,SAAO;AACHf,IAAAA,KAAK,EAAEK,YADJ;AAEHY,IAAAA,OAAO,EAAEb,YAFN;AAGHE,IAAAA,QAHG;AAIHE,IAAAA,kBAJG;AAKHM,IAAAA,gBALG;AAMHE,IAAAA;AANG,GAAP;AAQH,CA5CD;;AA8CA,eAAerB,SAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useNumber = (input) => {\r\n    const numExp = /^[0-9\\b]+$/\r\n\r\n    let val = input.target.value;\r\n\r\n    if(input.target.value === '' || numExp.test(input.target.value)) return true;\r\n    else input.target.value = val.substring(0, (val.length-1))\r\n\r\n\r\n    // const [enteredValue, setEnteredValue] = useState('');\r\n    // const [enteredValueIsValid, setEnteredValueIsValid] = useState(false);\r\n    // const [isTouched, setIsTouched] = useState(false);\r\n\r\n    // let l = enteredValue.length;\r\n\r\n    // const numberRegEx = /[0-9]/;\r\n    const valueIsValid = input(enteredValue);\r\n    const hasError = !valueIsValid && isTouched;\r\n\r\n    const valueChangeHandler = event => {\r\n        console.log(enteredValue, valueIsValid)\r\n        console.log(event.target.value[l-1])\r\n        setEnteredValue(event.target.value);\r\n        // valueIsValid = numberRegEx.test(event.target.value[l-1])\r\n        \r\n    };\r\n\r\n    const inputBlurHandler = event => {\r\n        setIsTouched(true);\r\n    };\r\n\r\n    const reset = () => {\r\n        setEnteredValue('');\r\n        setIsTouched(false);\r\n    };\r\n\r\n    return {\r\n        value: enteredValue,\r\n        isValid: valueIsValid,\r\n        hasError,\r\n        valueChangeHandler,\r\n        inputBlurHandler,\r\n        reset\r\n    };\r\n};\r\n\r\nexport default useNumber;"]},"metadata":{},"sourceType":"module"}