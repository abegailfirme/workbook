{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useInput = validatror => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validator(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  return {\n    value: enteredValue,\n    valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler\n  };\n};\n\n_s(useInput, \"uN9KnldpqRIT2LwByiGz+Mp8wEw=\");\n\nexport default useInput;","map":{"version":3,"sources":["C:/Users/abegail.firme/devpractice/ReactJS/01-starting-project/src/hooks/useInput.js"],"names":["useState","useInput","validatror","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","validator","hasError","valueChangeHandler","event","target","value","inputBlurHandler"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,UAAD,IAAgB;AAAA;;AAC7B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGC,SAAS,CAACL,YAAD,CAA9B;AACA,QAAMM,QAAQ,GAAG,CAACF,YAAD,IAAiBF,SAAlC;;AAEA,QAAMK,kBAAkB,GAAGC,KAAK,IAAI;AAChCP,IAAAA,eAAe,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAGH,KAAK,IAAI;AAC9BL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,SAAO;AACHO,IAAAA,KAAK,EAAEV,YADJ;AAEHI,IAAAA,YAFG;AAGHE,IAAAA,QAHG;AAIHC,IAAAA,kBAJG;AAKHI,IAAAA;AALG,GAAP;AAOH,CAtBD;;GAAMb,Q;;AAwBN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useInput = (validatror) => {\r\n    const [enteredValue, setEnteredValue] = useState('');\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    const valueIsValid = validator(enteredValue);\r\n    const hasError = !valueIsValid && isTouched;\r\n\r\n    const valueChangeHandler = event => {\r\n        setEnteredValue(event.target.value);\r\n    };\r\n\r\n    const inputBlurHandler = event => {\r\n        setIsTouched(true);\r\n    };\r\n\r\n    return {\r\n        value: enteredValue, \r\n        valueIsValid,\r\n        hasError, \r\n        valueChangeHandler, \r\n        inputBlurHandler\r\n    };\r\n};\r\n\r\nexport default useInput;"]},"metadata":{},"sourceType":"module"}